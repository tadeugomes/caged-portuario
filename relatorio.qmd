---
title: " Mercado de Trabalho Portuário"
subtitle: "Último dado disponível: outubro de 2024"
author: "Observatório Portuário"
crossref: 
  tbl-prefix: Tabela
  tbl-title: Tabela
  fig-prefix: Gráfico
  fig-title: Gráfico
  ref-hyperlink: true
execute:
  echo: true
format:
  html: 
    toc: true
    toc-title: "Sumário"
    echo: false
    number-sections: true
    lang: pt
---

```{r, include=FALSE, warning=FALSE, message=FALSE}
library(tidyverse)
library(RColorBrewer)
library(highcharter)
library(reactable)
library(lubridate)
library(tidyr)


```

```{r setup, include=FALSE}

# Definindo opções globais para suprimir mensagens e warnings
knitr::opts_chunk$set(message = FALSE, warning = FALSE)

# Suprimindo mensagens de inicialização dos pacotes
suppressPackageStartupMessages({
  library(dplyr)
  library(tidyr)
  library(ggplot2)
})

options(dplyr.summarise.inform = FALSE)

library(readr)

# Especificar os tipos de colunas
col_types <- cols(
  ano = col_integer(),
  mes = col_integer(),
  sigla_uf = col_character(),
  saldo_movimentacao = col_factor(),
  id_municipio = col_character(),
  cnae_2_secao = col_character(),
  categoria = col_character(),
  cnae_2_subclasse = col_character(),
  cbo_2002 = col_factor(),
  grau_instrucao = col_factor(),
  sexo = col_factor(),
  salario_mensal = col_double(),
  indicador_trabalho_intermitente = col_factor(),
  indicador_trabalho_parcial = col_factor(),
  data = col_date(),
  regiao = col_character()
)


# Caso UTF-8 não funcione corretamente,  tentar Latin1
ultimo_dado <- read_csv("dados/tratados/ultimo_dado.csv", locale = locale(encoding = "Latin1"), col_types = col_types)



```




# Dinâmica do Mercado de Trabalho Portuário no Brasil

```{r}



library(readr)

# Especificar os tipos de colunas
col_types <- cols(
  ano = col_integer(),
  mes = col_integer(),
  sigla_uf = col_character(),
  saldo_movimentacao = col_factor(),
  id_municipio = col_character(),
  cnae_2_secao = col_character(),
  categoria = col_character(),
  cnae_2_subclasse = col_character(),
  cbo_2002 = col_factor(),
  grau_instrucao = col_factor(),
  sexo = col_factor(),
  salario_mensal = col_double(),
  indicador_trabalho_intermitente = col_factor(),
  indicador_trabalho_parcial = col_factor(),
  data = col_date(),
  regiao = col_character()
)


# Caso UTF-8 não funcione corretamente,  tentar Latin1
ultimo_dado <- read_csv("dados/tratados/ultimo_dado.csv", locale = locale(encoding = "Latin1"), col_types = col_types)

#saldo nacional

# Agrupar os dados e contar os Admitidos e Desligados
resultado_contagem <- ultimo_dado %>%
  group_by(saldo_movimentacao) %>%
  summarise(contagem = n())

# Calcular valores de Admitidos e Desligados
Admitidos <- resultado_contagem %>% filter(saldo_movimentacao == "Admitidos") %>% pull(contagem)
Desligados <- resultado_contagem %>% filter(saldo_movimentacao == "Desligados") %>% pull(contagem)
saldo_nacional <- Admitidos - Desligados

```

O número de admitidos no mês foi de `r Admitidos`, enquanto o de desligados foi de `r Desligados`, o que resultou em um saldo (diferença entre admitidos e desligados ) de `r saldo_nacional` postos de trabalho no setor portuário no país.

```{r}

# Calcular a contagem de Admitidos e Desligados por regiao
contagem_saldo_por_regiao <- ultimo_dado %>%
  group_by(regiao) %>%
  count(saldo_movimentacao)

# Calcular saldo para a região Norte
Admitidos_norte <- contagem_saldo_por_regiao %>%
  filter(regiao == "Norte", saldo_movimentacao == "Admitidos") %>%
  pull(n)
Desligados_norte <- contagem_saldo_por_regiao %>%
  filter(regiao == "Norte", saldo_movimentacao == "Desligados") %>%
  pull(n)
saldo_norte <- Admitidos_norte - Desligados_norte

# Calcular saldo para a região Sul
Admitidos_sul <- contagem_saldo_por_regiao %>%
  filter(regiao == "Sul", saldo_movimentacao == "Admitidos") %>%
  pull(n)
Desligados_sul <- contagem_saldo_por_regiao %>%
  filter(regiao == "Sul", saldo_movimentacao == "Desligados") %>%
  pull(n)
saldo_sul <- Admitidos_sul - Desligados_sul

# Calcular saldo para a região Centro-Oeste
Admitidos_centro_oeste <- contagem_saldo_por_regiao %>%
  filter(regiao == "Centro-Oeste", saldo_movimentacao == "Admitidos") %>%
  pull(n)
Desligados_centro_oeste <- contagem_saldo_por_regiao %>%
  filter(regiao == "Centro-Oeste", saldo_movimentacao == "Desligados") %>%
  pull(n)
saldo_centro_oeste <- Admitidos_centro_oeste - Desligados_centro_oeste

# Calcular saldo para a região Nordeste
Admitidos_nordeste <- contagem_saldo_por_regiao %>%
  filter(regiao == "Nordeste", saldo_movimentacao == "Admitidos") %>%
  pull(n)
Desligados_nordeste <- contagem_saldo_por_regiao %>%
  filter(regiao == "Nordeste", saldo_movimentacao == "Desligados") %>%
  pull(n)
saldo_nordeste <- Admitidos_nordeste - Desligados_nordeste

# Calcular saldo para a região Sudeste
Admitidos_sudeste <- contagem_saldo_por_regiao %>%
  filter(regiao == "Sudeste", saldo_movimentacao == "Admitidos") %>%
  pull(n)
Desligados_sudeste <- contagem_saldo_por_regiao %>%
  filter(regiao == "Sudeste", saldo_movimentacao == "Desligados") %>%
  pull(n)
saldo_sudeste <- Admitidos_sudeste - Desligados_sudeste


```

Ao considerar as regiões do país, observa-se que o desempenho no Sudeste foi de `r saldo_sudeste` vínculos de saldo, resultado de `r Admitidos_sudeste` admitidos e `r Desligados_sudeste` desligados. No Nordeste, o saldo total foi de `r saldo_nordeste` vínculos, com `r Admitidos_nordeste` admitidos e `r Desligados_nordeste` desligados.

Na região Norte, o saldo foi de `r saldo_norte` vínculos, com `r Admitidos_norte` admitidos e `r Desligados_norte` desligados. Já na região Sul, o resultado foi de `r saldo_sul` vínculos, sendo `r Admitidos_sul` admitidos e `r Desligados_sul` desligados. Por fim, a região Centro-Oeste apresentou um saldo de `r saldo_centro_oeste` vínculos, com `r Admitidos_centro_oeste` admitidos e `r Desligados_centro_oeste` desligados.

Ao considerar o @fig-saldo_regiao, verifica-se as respectivas movimentações de admitidos e desligados por região.

```{r saldo_regiao}
#| label: fig-saldo_regiao
#| fig-cap: "Movimentação de vínculos por região"
#| warning: false

# saldo_movimentacao por regiao
ultimo_dado %>%
  group_by(regiao) %>%
  count(saldo_movimentacao) %>% 
  ggplot(aes(x = regiao, y = n, fill = saldo_movimentacao)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = n), 
            position = position_stack(vjust = 0.5), # Posição no centro da barra
            size = 3, 
            color = "black") + # Cor do texto
  labs(title = "",
       x = "",
       y = "",
       fill = "Saldo Movimentação") +
  theme_minimal() +
       scale_fill_manual(values = c("Admitidos" = "#87CEFA", "Desligados" = "#FF6347"))+
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotaciona o texto do eixo X

```

Ao analisar o desempenho por unidade da federação, o @fig-saldo_uf mostra o desempenho de cada estado no mês.

```{r}
#| warning: false
#| message: false
#| fig-cap: "Saldo por estado"
#| label: fig-saldo_uf



### Saldo por UF 

library(dplyr)
library(ggplot2)
library(lubridate)

# Seleciona o último dado de mês disponível para análise do mês vigente

# Selecionar as colunas relevantes e converter saldo_movimentacao
df_saldo_mensal <- ultimo_dado %>%
  select(sigla_uf, saldo_movimentacao, data) %>%
  mutate(saldo_movimentacao_num = case_when(
    saldo_movimentacao == "Desligados" ~ -1,
    saldo_movimentacao == "Admitidos" ~ 1,
    TRUE ~ NA_real_  # para lidar com possíveis valores faltantes ou desconhecidos
  )) %>%
  # Agrupar por sigla_uf, ano e mês, e calcular a soma mensal
  group_by(sigla_uf, year = year(data), month = month(data)) %>%
  summarize(saldo_somado_mensal = sum(saldo_movimentacao_num, na.rm = TRUE)) %>%
  ungroup()

# Criar o dataset df_variacao
df_variacao <- df_saldo_mensal %>%
  arrange(sigla_uf, year, month) %>%
  group_by(sigla_uf) %>%
  mutate(
    saldo_anterior = lag(saldo_somado_mensal, n = 12),
    percentual_variacao = round(((saldo_somado_mensal - saldo_anterior) / saldo_anterior) * 100, 2),
    saldo_trimestral_anterior = lag(saldo_somado_mensal, n = 3),
    variacao_trimestral = round(((saldo_somado_mensal - saldo_trimestral_anterior) / saldo_trimestral_anterior) * 100, 2)
  ) %>%
  slice_max(order_by = month, n = 1) %>%  # Seleciona a última data para cada sigla_uf
  ungroup()

# Criar o gráfico com ggplot2
ggplot(df_saldo_mensal, aes(x = reorder(sigla_uf, saldo_somado_mensal), y = saldo_somado_mensal)) +
  geom_bar(stat = "identity", fill = "#87CEFA") +
  coord_flip() +
  labs(
    title = "",
    x = "",
    y = ""
  ) +
  theme_minimal() +
  geom_text(aes(label = saldo_somado_mensal), hjust = -0.2)



```

Os gráficos acima apresentam a distribuição de movimentações de vínculos em diferentes unidades federativas e em suas respectivas regiões. A análise permite identificar variações na quantidade de movimentações, evidenciando tanto aumentos quanto reduções em cada estado e região. Esse panorama facilita a compreensão do desempenho regional no mês.

O @fig-salarial_regiao, por sua vez, apresenta a distribuição da mediana salarial mensal para admitidos e desligados nas diferentes regiões do Brasil. Os boxplots permitem visualizar a variação dos salários dentro de cada grupo, destacando a mediana, os quartis e os possíveis valores atípicos. Essa análise comparativa entre admitidos e desligados em cada região oferece uma perspectiva das diferenças salariais, ajudando a identificar tendências regionais.

```{r, cache=TRUE}
#| warning: false
#| message: false
#| fig-cap: "Mediana salarial mensal por região (R$)"
#| label: fig-salarial_regiao

## Mediana do salario por regiao

salario_regiao <- ultimo_dado

names(salario_regiao) <- make.names(names(salario_regiao), unique = TRUE)

# Calcula os quartis e o IQR, ignorando valores NA
quartis <- quantile(salario_regiao$salario_mensal, probs = c(0.25, 0.75), na.rm = TRUE)
IQR <- quartis[2] - quartis[1]

# Define os limites para outliers extremos
limite_inferior <- quartis[1] - 1.5 * IQR
limite_superior <- quartis[2] + 1.5 * IQR

# Filtra os dados para eliminar os outliers extremos
dados_sem_outliers_extremos_regiao <- salario_regiao %>%
  filter(salario_mensal >= limite_inferior & salario_mensal <= limite_superior)

# Removendo linhas com NA, se houver
dados_sem_outliers_extremos_regiao <- na.omit(dados_sem_outliers_extremos_regiao)

# Calcular as medianas
medianas <- dados_sem_outliers_extremos_regiao %>%
  group_by(regiao, saldo_movimentacao) %>%
  summarise(mediana_salario = median(salario_mensal, na.rm = TRUE), .groups = "drop")

# Criar o boxplot com os valores das medianas exibidos
if (nrow(dados_sem_outliers_extremos_regiao) > 0) {
  ggplot(dados_sem_outliers_extremos_regiao, aes(x = saldo_movimentacao, y = salario_mensal, fill = regiao)) +
    geom_boxplot() +
    geom_text(data = medianas, aes(label = format(mediana_salario, digits = 2, big.mark = ".", decimal.mark = ","), y = mediana_salario),
              position = position_dodge(width = 1),
              vjust = -0.5,
              color = "black",
              size = 3.5) +
    facet_wrap(~regiao, scales = "free_x") +
    labs(title = "",
         x = "",
         y = "") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 1, hjust = 0.5),
          legend.position = "none")
} else {
  message("Nenhum dado disponível após o filtro de outliers extremos.")
}





```

O @fig-saldo_sexo_br apresenta a distribuição de admissões e desligamentos no mercado de trabalho pelo recorte de sexo. As barras empilhadas indicam o número total de movimentações, permitindo uma comparação visual entre os grupos de homens e mulheres. Essa visualização facilita a análise das dinâmicas de contratação e desligamento, possibilitando a identificação de tendências de inclusão ou exclusão no mercado de trabalho de acordo com o sexo de cada trabalhador.

```{r}
#| warning: false
#| message: false
#| fig-cap: "Saldo de movimentações por sexo"
#| label: fig-saldo_sexo_br

# saldo_movimentacao por sexo no br 
ultimo_dado %>%
  group_by(sexo) %>%
  count(saldo_movimentacao) %>% 
  ggplot(aes(x = sexo, y = n, fill = saldo_movimentacao)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = n), 
            position = position_stack(vjust = 0.5), # Posição no centro da barra
            size = 3, # Tamanho do texto
            color = "black") + # Cor do texto
  labs(title = "",
       x = "",
       y = "",
       fill = "Movimentações") +
  theme_minimal() +
       scale_fill_manual(values = c("Admitidos" = "#87CEFA", "Desligados" = "#FF6347"))

```

O @fig-escolaridade_br, por sua vez, mostra a distribuição de admissões e desligamentos no mercado de trabalho, segmentada por diferentes níveis de escolaridade, no Brasil. As barras empilhadas mostram o total de movimentações para cada nível educacional, permitindo uma análise comparativa sobre como o grau de instrução influencia a dinâmica de contratação e desligamento, o que pode indicar padrões de empregabilidade na força de trabalho.

```{r}
#| fig-cap: "Movimentações por grau de escolaridade no país"
#| label: fig-escolaridade_br

library(readr)

# Especificar os tipos de colunas
col_types <- cols(
  ano = col_integer(),
  mes = col_integer(),
  sigla_uf = col_character(),
  saldo_movimentacao = col_factor(),
  id_municipio = col_character(),
  cnae_2_secao = col_character(),
  categoria = col_character(),
  cnae_2_subclasse = col_character(),
  cbo_2002 = col_factor(),
  grau_instrucao = col_factor(),
  sexo = col_factor(),
  salario_mensal = col_double(),
  indicador_trabalho_intermitente = col_factor(),
  indicador_trabalho_parcial = col_factor(),
  data = col_date(),
  regiao = col_character()
)

# Caso UTF-8 não funcione corretamente,  tentar Latin1
ultimo_dado <- read_csv("dados/tratados/ultimo_dado.csv", locale = locale(encoding = "Latin1"), col_types = col_types)

library(dplyr)
library(ggplot2)

ultimo_dado %>%
  mutate(saldo_movimentacao_num = case_when(
    saldo_movimentacao == "Desligados" ~ -1,
    saldo_movimentacao == "Admitidos" ~  1,
    TRUE ~ NA_real_
  ),
  saldo_movimentacao_num = as.integer(saldo_movimentacao_num)) %>% 
  group_by(grau_instrucao, saldo_movimentacao) %>% 
  summarise(n = n(), .groups = "drop") %>% 
  ggplot(aes(x = grau_instrucao, y = n, fill = saldo_movimentacao)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
  coord_flip() +
  geom_text(aes(label = n), 
            position = position_dodge(width = 0.8),
            vjust = 0.5,
            size = 3,
            color = "black") +
  labs(title = "",
       x = "",
       y = "",
       fill = "Movimentações") +
  theme_minimal() +
  scale_fill_manual(values = c("Admitidos" = "#87CEFA", "Desligados" = "#FF6347"))



```

O @fig-cbo_saldo_postivo apresenta as 10 ocupações que registraram o maior saldo positivo de movimentações no mês no país, indicando um maior número de admissões em relação aos desligamentos. Cada barra representa uma ocupação e está segmentada em admissões e desligamentos, permitindo uma análise clara das profissões com maior demanda. Isso auxilia na identificação de tendências de crescimento e setores com maior contratação.

```{r}
#| fig-cap: "10 ocupações com saldo positivo no mês"
#| label: fig-cbo_saldo_postivo

top_10_ocupacoes <- ultimo_dado %>%
  group_by(cbo_2002) %>%
  summarise(
    admitidos = sum(saldo_movimentacao == "Admitidos"),
    desligados = sum(saldo_movimentacao == "Desligados"),
    saldo = admitidos - desligados
  ) %>%
  arrange(desc(saldo)) %>%
  slice(1:10)

# Transformar os dados para o formato long (necessário para o gráfico agrupado)
top_10_ocupacoes_long <- top_10_ocupacoes %>%
  select(cbo_2002, admitidos, desligados) %>%
  pivot_longer(cols = c(admitidos, desligados), names_to = "movimentacao", values_to = "quantidade")

# Criar o gráfico de barras agrupadas para Admitidos e Desligados com labels
ggplot(top_10_ocupacoes_long, aes(x = reorder(cbo_2002, -quantidade), y = quantidade, fill = movimentacao)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
  geom_text(
    aes(label = quantidade),
    position = position_dodge(width = 0.8),
    vjust = -0.3,  # Posição da label acima da barra
    size = 3
  ) +
  coord_flip() +
  labs(
    title = "Top 10 Ocupações com maiores saldos",
    x = "",
    y = "",
    fill = "Movimentação"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.text.y = element_text(size = 10)
  ) +
  scale_fill_manual(values = c("admitidos" = "#87CEFA", "desligados" = "#FF6347"))


```

O @fig-cbo_saldo_negativo, por sua vez, mostra as 10 (dez) ocupações com o maior saldo negativo de movimentações no mês, mostrando profissões onde os desligamentos superaram as admissões. Essa informação é útil para identificar áreas de instabilidade e potencial necessidade de intervenções ou requalificação ou eventuais crises conjunturais.

```{r}
#| fig-cap: "10 ocupações com saldo negativo no mês"
#| label: fig-cbo_saldo_negativo

# Selecionar as 10 ocupações com menores saldos
menores_10_ocupacoes <- ultimo_dado %>%
  group_by(cbo_2002) %>%
  summarise(
    admitidos = sum(saldo_movimentacao == "Admitidos"),
    desligados = sum(saldo_movimentacao == "Desligados"),
    saldo = admitidos - desligados
  ) %>%
  arrange(saldo) %>%
  slice(1:10)

# Transformar os dados para o formato long (necessário para o gráfico agrupado)
menores_10_ocupacoes_long <- menores_10_ocupacoes %>%
  select(cbo_2002, admitidos, desligados) %>%
  pivot_longer(cols = c(admitidos, desligados), names_to = "movimentacao", values_to = "quantidade")

# Criar o gráfico de barras agrupadas para Admitidos e Desligados com labels
ggplot(menores_10_ocupacoes_long, aes(x = reorder(cbo_2002, quantidade), y = quantidade, fill = movimentacao)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
  geom_text(
    aes(label = quantidade),
    position = position_dodge(width = 0.8),
    vjust = 0.2,  # Posição da label acima da barra
    size = 3
  ) +
  coord_flip() +
  labs(
    title = "Top 10 Ocupações com menores Saldos",
    x = "",
    y = "",
    fill = "Movimentação"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.text.y = element_text(size = 10)
  ) +
  scale_fill_manual(values = c("admitidos" = "#87CEFA", "desligados" = "#FF6347"))

```

# Mercado de Trabalho Portuário no Maranhão

```{r, cache=TRUE}

#|cache=TRUE 

library(dplyr)
library(lubridate)
library(readr)

# Especificar os tipos de colunas
col_types <- cols(
  ano = col_integer(),
  mes = col_integer(),
  sigla_uf = col_character(),
  saldo_movimentacao = col_factor(),
  id_municipio = col_character(),
  cnae_2_secao = col_character(),
  categoria = col_character(),
  cnae_2_subclasse = col_character(),
  cbo_2002 = col_factor(),
  grau_instrucao = col_factor(),
  sexo = col_factor(),
  salario_mensal = col_double(),
  indicador_trabalho_intermitente = col_factor(),
  indicador_trabalho_parcial = col_factor(),
  data = col_date(),
  regiao = col_character()
)


# Caso UTF-8 não funcione corretamente,  tentar Latin1
df_limpo <- read_csv("dados/tratados/df_limpo.csv", locale = locale(encoding = "Latin1"), col_types = col_types)



# 1) Criar a coluna numérica que converte "Admitidos" e "Desligados"
df_limpo_saldo <- df_limpo %>%
  mutate(
    saldo_movimentacao_num = case_when(
      saldo_movimentacao == "Admitidos"  ~  1,
      saldo_movimentacao == "Desligados" ~ -1,
      TRUE ~ NA_real_
    )
  )

# 2) Agregar por UF, ano e mês, obtendo saldo_mensal e criando data_mensal para ordenação
df_mensal <- df_limpo_saldo %>%
  group_by(sigla_uf, ano, mes) %>%
  summarise(
    saldo_mensal = sum(saldo_movimentacao_num, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    data_mensal = as.Date(paste(ano, mes, "01", sep = "-"))
  )

# 3) Calcular variações trimestral (3 meses) e anual (12 meses)
df_variacao <- df_mensal %>%
  arrange(sigla_uf, data_mensal) %>%
  group_by(sigla_uf) %>%
  mutate(
    saldo_trimestral_anterior = lag(saldo_mensal, 3),
    dif_trimestral            = saldo_mensal - saldo_trimestral_anterior,
    pct_trimestral            = round((dif_trimestral / saldo_trimestral_anterior) * 100, 2),
    
    saldo_anual_anterior      = lag(saldo_mensal, 12),
    dif_anual                 = saldo_mensal - saldo_anual_anterior,
    pct_anual                 = round((dif_anual / saldo_anual_anterior) * 100, 2)
  ) %>%
  ungroup()


saldo_ma <- df_variacao %>%
  filter(sigla_uf == "MA" & data_mensal == max(data_mensal)) %>%  
  pull(saldo_mensal)

saldo_ma_trimestral <- df_variacao %>%
  filter(sigla_uf == "MA" & data_mensal == max(data_mensal)) %>%  
  pull(dif_trimestral)


```

A movimentação de empregos portuários e aquaviários no estado do Maranhão no mês resultou no saldo de `r saldo_ma` vagas, uma variação de `r saldo_ma_trimestral` vagas no trimestre. 

O @fig-saldo-ma mostra a evolução da movimentação e o respectivo saldo de vínculos no estado, mostrando a tendência geral dos processos de admissão e demissão.

```{r, warning=FALSE, message=FALSE, cache=TRUE}
#| warning: false
#| message: false
#| cache: true
#| fig-cap: "Evolução dos vínculos no Maranhão"
#| label: fig-saldo-ma




# 1. Filtra os dados para o estado do Maranhão (sigla_uf == "MA")
dados_ma <- df_limpo %>% 
  filter(sigla_uf=="MA")

# 2. Conta 'Admitidos' e 'Desligados' agrupados por 'data' e 'saldo_movimentacao'

dados_ma_agrupado <- dados_ma %>%
  group_by(data, saldo_movimentacao) %>%
  summarise(contagem = n(), .groups = 'drop')

# 3. Transforma os dados para o formato mais largo
dados_ma_pivot <- dados_ma_agrupado %>%
  pivot_wider(
    names_from = saldo_movimentacao,
    values_from = contagem,
    values_fill = list(contagem = 0)
  )

# 4. Calcula o saldo líquido (saldo)
dados_ma_pivot_saldo <- dados_ma_pivot %>%
  mutate(saldo = Admitidos - Desligados)

# 5. Identifica os últimos valores de cada série (opcional, caso precise para outra visualização)
dados_finais <- dados_ma_pivot_saldo %>%
  filter(data == max(data)) %>%
  select(data, Admitidos, Desligados, saldo) %>%
  pivot_longer(cols = c(Admitidos, Desligados, saldo), names_to = "Movimentação", values_to = "valor")

# 6. Cria o gráfico de linhas com Admitidos, Desligados e Saldo
p_2 <- ggplot(dados_ma_pivot_saldo, aes(x = data)) +
  geom_line(aes(y = Admitidos, color = "Admitidos"), size = 1) +
  geom_line(aes(y = Desligados, color = "Desligados"), size = 1) +
  geom_line(aes(y = saldo, color = "Saldo"), linetype = "dashed", size = 1) +
  geom_text(
    data = dados_finais, aes(x = data, y = valor, label = valor, color = Movimentação),
    vjust = -0.5, size = 3
  ) +
  labs(
    title = "Movimentação de Trabalho no Maranhão",
    x = "Mês/Ano",
    y = "",
    color = "Tipo de Movimentação"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  scale_color_manual(
    values = c(
      "Admitidos" = "#1f77b4",    # Azul
      "Desligados" = "#FF6347",   # Laranja
      "Saldo" = "#2ca02c"         # Verde
    )
  )

# Exibe o gráfico
p_2

```

A @tbl-tabela-ma apresenta um resumo das movimentações de admissões e desligamentos no estado do Maranhão ao longo dos últimos 12 meses. Para cada mês, é possível observar a quantidade de desligamentos e admissões, bem como o saldo resultante dessas movimentações. Valores positivos no saldo indicam que houve mais admissões do que desligamentos, sugerindo um crescimento no número de vínculos empregatícios. Já valores negativos revelam que os desligamentos superaram as admissões, refletindo uma redução líquida de postos de trabalho no período. Essa visão mensal permite um acompanhamento das flutuações do mercado de trabalho no estado.

```{r}
#| warning: false
#| message: false
#| tbl-cap: Movimentações nos últimos 12 (doze) meses no Maranhão
#| label: tbl-tabela-ma

library(tidyverse)
library(reactable)


dados_selecionados <- dados_ma_pivot_saldo %>%
  filter(data >= max(data) %m-% months(10)) %>%
  select(data, Admitidos, Desligados, saldo)

reactable(dados_selecionados, 
          columns = list(
            data = colDef(
              name = "Mês",
              # Formatação da data para exibir apenas mês e ano
              cell = function(value) {
                format(value, "%b %Y") # Exemplo: "Jan 2023"
              }
            ),
            Desligados = colDef(name = "Desligados"),
            Admitidos = colDef(name = "Admitidos"),
            saldo = colDef(
              name = "Saldo",
              style = function(value) {
                if (value < 0) {
                  list(color = "red", fontWeight = "bold")
                } else if (value > 0) {
                  list(color = "blue", fontWeight = "bold")
                } else {
                  list(color = "black", fontWeight = "bold")
                }
              }
            )
          ),
          defaultSorted = list(data = "desc"),
          striped = TRUE,
          highlight = TRUE)
         
```

Por sua vez, observa-se no @fig-salario-ma o desempenho do estado do Maranhão no quesito salarial.

```{r}
#| warning: false
#| message: false
#| fig-cap: "Mediana do salário mensal no Maranhão (R$)"
#| label: fig-salario-ma

options(dplyr.summarise.inform = FALSE)

suppressWarnings({
  library(dplyr)
  # Outras operações com o dplyr
})

#### Mediana UF 

dados_salario_uf <- ultimo_dado %>%
  filter(sigla_uf == "MA")

# Calcula os quartis e o IQR
quartis <- quantile(dados_salario_uf$salario_mensal, probs = c(0.25, 0.75))
IQR <- quartis[2] - quartis[1]

# Define os limites para outliers extremos
limite_inferior <- quartis[1] - 1.5 * IQR
limite_superior <- quartis[2] + 1.5 * IQR

# Filtra os dados para eliminar os outliers extremos
dados_sem_outliers_extremos_UF <- dados_salario_uf %>%
  filter(salario_mensal >= limite_inferior & salario_mensal <= limite_superior)

# Removendo linhas com NA, se houver
dados_sem_outliers_extremos_UF <- na.omit(dados_sem_outliers_extremos_UF)

# Calcular as medianas
medianas <- dados_sem_outliers_extremos_UF %>%
  group_by(regiao, saldo_movimentacao) %>%
  summarise(mediana_salario = median(salario_mensal, na.rm = TRUE))

# Criar o boxplot com os valores das medianas exibidos
ggplot(dados_sem_outliers_extremos_UF, aes(x = saldo_movimentacao, y = salario_mensal, fill = regiao)) +
  geom_boxplot() +
  geom_text(data = medianas, aes(label = format(mediana_salario, digits = 2, big.mark = ".", decimal.mark = ","), y = mediana_salario),
            position = position_dodge(width = 0.75),
            vjust = -0.5,
            color = "black",
            size = 3.5) +
  labs(title = "",
       x = "",
       y = "Mediana salarial") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 1, hjust = 1),
        legend.position = "none")


```

No @fig-saldo_sexo_ma estão os dados das movimentações por sexo para o mês vigente no Maranhão.

```{r}
#| warning: false
#| message: false
#| fig-cap: "Saldo de movimentações por sexo no Maranhão"
#| label: fig-saldo_sexo_ma

# saldo_movimentacao por sexo no br 
ultimo_dado %>%
filter(sigla_uf=="MA") %>% 
  group_by(sexo) %>%
  count(saldo_movimentacao) %>% 
  ggplot(aes(x = sexo, y = n, fill = saldo_movimentacao)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = n), 
            position = position_stack(vjust = 0.5), # Posição no centro da barra
            size = 3, # Tamanho do texto
            color = "black") + # Cor do texto
  labs(title = "",
       x = "",
       y = "",
       fill = "Movimentações") +
  theme_minimal()


```

Ao observar as movimentações por grau de escolaridade, tem-se os valores conforme se observa no @fig-escolaridade_ma.

```{r}
#| fig-cap: "Movimentações por grau de escolaridade no Maranhão"
#| label: fig-escolaridade_ma

ultimo_dado %>%
  filter(sigla_uf == "MA") %>% 
  group_by(grau_instrucao) %>%
  count(saldo_movimentacao) %>% 
  ggplot(aes(x = grau_instrucao, y = n, fill = saldo_movimentacao)) +
  geom_bar(stat = "identity") +
  coord_flip()+
  geom_text(aes(label = n), 
            position = position_stack(vjust = 0.5), # Posição no centro da barra
            size = 3, # Tamanho do texto
            color = "black") + # Cor do texto
  labs(title = "",
       x = "",
       y = "",
       fill = "Movimentações") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotaciona o eixo x para melhor visualização



```

O @fig-cbo_saldo_postivo_ma mostra as 10 (dez) ocupações com saldo positivo no mês no estado do Maranhão.

```{r}
#| fig-cap: "10 ocupações com saldo positivo no mês"
#| label: fig-cbo_saldo_postivo_ma


# Calcula o saldo total de movimentação por cbo_2002 e seleciona os 10 maiores no MA
top_10_cbo <- ultimo_dado %>%
  filter(sigla_uf=="MA") %>% 
  group_by(cbo_2002, saldo_movimentacao) %>%
  summarise(contagem = n(), .groups = 'drop') %>% 
  spread(key = saldo_movimentacao, value = contagem, fill = 0) %>% 
  mutate(saldo = Admitidos - Desligados) %>% # Calcula o saldo de movimentação
  ungroup() %>%
  arrange(desc(saldo)) %>% # Ordena pelo saldo em ordem decrescente
  slice(1:10) # Seleciona os 10 maiores saldos

# Prepara os dados para o gráfico com os 10 maiores
top_10_plot_data <- ultimo_dado %>%
  filter(cbo_2002 %in% top_10_cbo$cbo_2002) %>%
  group_by(cbo_2002) %>%
  count(saldo_movimentacao)

# Cria o gráfico com os 10 maiores valores de saldo de movimentação
ggplot(top_10_plot_data, aes(x = reorder(cbo_2002, n), y = n, fill = saldo_movimentacao)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) + # Barras lado a lado
  coord_flip() + # Inverte os eixos para melhor visualização
  geom_text(aes(label = n), 
            position = position_dodge(width = 0.8), # Ajusta a posição do texto para barras lado a lado
            vjust = 0.5, # Ajusta a posição vertical do texto
            size = 3, # Tamanho do texto
            color = "black") + # Cor do texto
  labs(title = "",
       x = "",
       y = "",
       fill = "") +
  theme_minimal()


```

O @fig-cbo_saldo_negativo_ma, por sua vez, mostra as 10 (dez) ocupações com saldo negativo no mês no Maranhão.

```{r}
#| fig-cap: "10 ocupações com saldo negativo no mês"
#| label: fig-cbo_saldo_negativo_ma

# Calcula o saldo total de movimentação por cbo_2002 e seleciona os 10 menores
bottom_10_cbo <- ultimo_dado %>%
  filter(sigla_uf=="MA") %>% 
  group_by(cbo_2002, saldo_movimentacao) %>%
  summarise(contagem = n(), .groups = 'drop') %>%
  spread(key = saldo_movimentacao, value = contagem, fill = 0) %>%
  mutate(saldo = Admitidos - Desligados) %>% # Calcula o saldo de movimentação
  ungroup() %>%
  arrange(saldo) %>% # Ordena pelo saldo em ordem crescente para pegar os menores
  slice(1:10) # Seleciona os 10 menores saldos

# Prepara os dados para o gráfico com os 10 menores
bottom_10_plot_data <- ultimo_dado %>%
  filter(cbo_2002 %in% bottom_10_cbo$cbo_2002) %>%
  group_by(cbo_2002) %>%
  count(saldo_movimentacao)

# Cria o gráfico com os 10 menores valores de saldo de movimentação
ggplot(bottom_10_plot_data, aes(x = reorder(cbo_2002, n), y = n, fill = saldo_movimentacao)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) + # Barras lado a lado
  coord_flip() + # Inverte os eixos para melhor visualização
  geom_text(aes(label = n), 
            position = position_dodge(width = 0.8), # Ajusta a posição do texto para barras lado a lado
            vjust = 0.5, # Ajusta a posição vertical do texto
            size = 3, # Tamanho do texto
            color = "black") + # Cor do texto
  labs(title = "",
       x = "",
       y = "",
       fill = "") +
  theme_minimal()
```
